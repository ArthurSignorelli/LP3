package sistemareservas;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class SistemaReservas {
    public static void main(String[] args) {
        Voo voo = new Voo("IF1234", 10);

        ExecutorService executorService = Executors.newFixedThreadPool(5);

        for (int i = 0; i < 15; i++) {
            executorService.submit(new Reserva(voo));
        }

        executorService.shutdown();
        try {
            executorService.awaitTermination(1, TimeUnit.MINUTES);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Processo de reservas concluído.");
    }
}
public class Reserva implements Runnable {
    private Voo voo;

    public Reserva(Voo voo) {
        this.voo = voo;
    }

    @Override
    public void run() {
        voo.reservarAssento();
    }
}
public class Voo {
    private String numeroVoo;
    private int capacidadeTotal;
    private int assentosReservados;

    public Voo(String numeroVoo, int capacidadeTotal) {
        this.numeroVoo = numeroVoo;
        this.capacidadeTotal = capacidadeTotal;
        this.assentosReservados = 0;
    }

        public synchronized boolean reservarAssento() {
        if (assentosReservados < capacidadeTotal) {
            assentosReservados++;
            System.out.println("Assento reservado com sucesso no voo " + numeroVoo +
                               ". Assentos reservados: " + assentosReservados);
            return true;
        } else {
            System.out.println("Não há mais assentos disponíveis no voo " + numeroVoo);
            return false;
        }
    }

    public int getAssentosReservados() {
        return assentosReservados;
    }

    public int getCapacidadeTotal() {
        return capacidadeTotal;
    }
}
